{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "K-Means_Clustering.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "5cjutXUG19Zm",
        "outputId": "f998e0df-7bd8-48a8-c555-9e5d9db65060",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "# reference: https://medium.com/@rishit.dagli/build-k-means-from-scratch-in-python-e46bf68aa875\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from matplotlib import style\n",
        "style.use('ggplot')\n",
        "X = np.array([[1, 2],\n",
        "              [1.5, 1.8],\n",
        "              [5, 8 ],\n",
        "              [8, 8],\n",
        "              [1, 0.6],\n",
        "              [9,11]])\n",
        "\n",
        "plt.scatter(X[:,0], X[:,1], s=150)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAT/0lEQVR4nO3dbWwU16HG8efgxTGQi192gyrbGGrsqIWmRG0j3Nu8wraVQpJWIFktSgClVRNcCaVpKTSV2qjpi/uyBbky1/mUiCtVFR8QUmKqSltDkFpBCQbFhcgJDjWotKJrsy4vtpddn/tha7e+2Mazu2bm2P/fN++e2XlgksfDmTmzxlprBQBwzjy/AwAAckOBA4CjKHAAcBQFDgCOosABwFEUOAA4KnSnd3jp0qWctotEIkokEgVOkz9yeUMub8jlzWzNVVlZOeHrnIEDgKMocABw1B2fQgGAucAm+2Xb98te6FHCWmWMkalZIbO+UaasoiD7oMABoICstbIH9skeOyIl+yRJmdH3PuiWPX1cpuFRmQ2bZYzJa18UOAAUkD2wT7ajXUoNTTwg2Zd9X5LZuCWvfTEHDgAFYpP9sscOT17eo1JDsseOyA5cyWt/FDgAFIht3y8l+6c3ONmXHZ8HChwACsRe6PE2vvdcXvujwAGgUG7e9DY+7XH8/0OBA0ChzJ/vbXzI4/j/hwIHgAIxNSu8jV9Wl9f+KHAAKBCzvlGa7iKdsnB2fB4ocAAoEFNWIdPwmFRcMvXA4pLsYp7S8rz2x0IeACggs2GzJI1biTlOWXhsJWa+KHAAKCBjjMzGLbLRp7LPQuk9p5C1Shsjs6wu+yyUPM+8R1HgADADTGm5zKbnJEnhGXpOOXPgAOAoChwAHEWBA4CjKHAAcBQFDgCOosABwFEUOAA4igIHAEfddiHP3r171dnZqdLSUsViMUnStWvXtHv3bv3jH//QPffco2984xu6++67ZzwsAODfbnsG/uijj+qll14a99rBgwd13333qaWlRffdd58OHjw4YwEBABO7bYGvXLnylrPrEydO6JFHHpEkPfLIIzpx4sTMpAMATCqnZ6EMDAyovDz7MJaysjINDAxMOjYejysej0uSmpubFYlEctmlQqFQztvOJHJ5Qy5vyOXNXMuV98OsjDEyxkz6fjQaVTQaHfs51we6RGboYTD5Ipc35PKGXN7M1lyVlZUTvp7TXSilpaW6cuWKJOnKlStavHhxzsEAALnJqcA/9alP6a233pIkvfXWW3rggQcKGgoAcHu3nULZs2ePzp49q6tXr+r5559XY2OjvvjFL2r37t3q6OgYu40QAHBn3bbAX3jhhQlf/973vlfwMACA6WMlJgA4igIHAEdR4ADgKAocABxFgQOAoyhwAHAUBQ4AjqLAAcBRFDgAOIoCBwBHUeAA4CgKHAAcRYEDgKMocABwFAUOAI6iwAHAURQ4ADiKAgcAR1HgAOAoChwAHEWBA4CjKHAAcBQFDgCOosABwFEUOAA4igIHAEeF/A4A+MUm+2Xb98te6FHCWmWMkalZIbO+Uaaswu94mKa5fBwpcMw51lrZA/tkjx2Rkn2SpMzoex90y54+LtPwqMyGzTLG+JYTU+M4UuCYg+yBfbId7VJqaOIByb7s+5LMxi13MBm84DjmWeBvvvmmOjo6ZIzR0qVL1dTUpOLi4kJlAwrOJvtljx2e/H/6Uakh2WNHZKNPyZSW35lwmDaOY1bOFzH7+/v129/+Vs3NzYrFYhoZGdEf//jHQmYDCs6275eS/dMbnOzLjkfgcByz8roLZWRkRKlUSplMRqlUSuXls+83HGYXe6HH2/jeczOUBPngOGblPIVSUVGhJ598Utu2bVNxcbFWr16t1atX3zIuHo8rHo9LkpqbmxWJRHILGgrlvO1MIpc3fudKWDt2oWs6QtYq7GNev/++JuN3Lo7jvz431w2vXbumEydOqLW1VQsXLtQvf/lLHT16VA8//PC4cdFoVNFodOznRCKR0/4ikUjO284kcnnjd66Mx7sR0sb4mtfvv6/J+J1rrh3HysrKCV/PeQqlq6tLS5Ys0eLFixUKhbRmzRq99957OQcE7gRTs8Lb+GV1M5QE+eA4ZuVc4JFIRO+//76Gh4dlrVVXV5eqqqoKmQ0oOLO+UZru4o6ycHY8AofjmJVzgdfX16uhoUE7d+7Ut771LVlrx02VAEFkyipkGh6TikumHlhckl0EMgtvPZsNOI5Zed0H3tjYqMbG2fmbDbOX2bBZksat4BunLDy2gg/BxXFkJSbmIGOMzMYtstGnss/Q6D2nkLVKGyOzrC77DI1ZesY2m3AcKXDMYaa0XGbTc5KkcEDv9sDtzeXjyONkAcBRFDgAOIoCBwBHUeAA4CgKHAAcRYEDgKMocABwFAUOAI6iwAHAURQ4ADiKAgcAR1HgAOAoChwAHEWBA4CjKHAAcBQFDgCOosABwFEUOAA4igIHAEdR4ADgKAocABxFgQOAoyhwAHAUBQ4AjqLAAcBRFDgAOIoCBwBHhfLZ+Pr162pra9PFixdljNG2bdt07733FiobAGAKeRX4a6+9pvvvv1/f/OY3lU6nNTw8XKhcAIDbyHkK5caNG3r33Xe1du1aSVIoFNKiRYsKFgwAMDVjrbW5bPiXv/xFr776qqqrq9Xb26va2lpt3bpVJSUl48bF43HF43FJUnNzs1KpVE5BQ6GQ0ul0TtvOJHJ5Qy5vyOXNbM1VXFw84es5F3hPT4+++93v6pVXXlF9fb1ee+01LViwQF/60pem3O7SpUu57E6RSESJRCKnbWcSubwhlzfk8ma25qqsrJzw9ZynUMLhsMLhsOrr6yVJDQ0NOn/+fK4fBwDwKOcCLysrUzgcHjuj7urqUnV1dcGCAQCmltddKM8++6xaWlqUTqe1ZMkSNTU1FSoXAOA28irw5cuXq7m5uVBZAAAesBITABxFgQOAoyhwAHAUBQ4AjqLAAcBRFDgAOIoCBwBHUeAA4CgKHAAcRYEDgKMocABwFAUOAI6iwAHAURQ4ADiKAgcAR1HgAOAoChwAHEWBA4CjKHAAcBQFDgCOosABwFEUOAA4igIHAEdR4ADgKAocABxFgQOAoyhwAHAUBQ4AjqLAAcBReRf4yMiIvv3tb6u5ubkQeQAA05R3gR86dEhVVVWFyAIA8CCvAu/r61NnZ6fWrVtXqDwAgGkK5bPx66+/rqefflqDg4OTjonH44rH45Kk5uZmRSKRnPYVCoVy3nYmkcsbcnlDLm/mWq6cC/zkyZMqLS1VbW2tzpw5M+m4aDSqaDQ69nMikchpf5FIJOdtZxK5vCGXN+TyZrbmqqysnPD1nAu8u7tbb7/9tk6dOqVUKqXBwUG1tLRo+/btOYcEAExfzgW+adMmbdq0SZJ05swZvfHGG5Q3ANxB3AcOAI7K6yLmqFWrVmnVqlWF+CgAwDRxBg4AjqLAAcBRFDgAOIoCBwBHUeAA4CgKHAAcRYEDgKMocABwFAUOAI6iwAHAURQ4ADiKAgcAR1HgAOAoChwAHEWBA4CjKHAAcBQFDgCOosABwFEUOAA4igIHAEdR4ADgKAocABxFgQOAoyhwAHAUBQ4AjqLAAcBRIb8DTMUm+2Xb98te6FHCWmWMkalZIbO+Uaaswu94AOCrQBa4tVb2wD7ZY0ekZJ8kKTP63gfdsqePyzQ8KrNhs4wxvuUEAD8Fs8AP7JPtaJdSQxMPSPZl35dkNm65g8kAIDhyLvBEIqHW1lYlk0kZYxSNRvX444/nHcgm+2WPHZ68vEelhmSPHZGNPiVTWp73fgHANTkXeFFRkZ555hnV1tZqcHBQu3bt0sc//nFVV1fnFci275eS/dMbnOyTbd8vs+m523/uf8yn6+ZNaf585tMBOC3nAi8vL1d5efbMd8GCBaqqqlJ/f3/+BX6hx9v43nNTvz/BfPrYe8ynA3BYQebAL1++rPPnz6uuru6W9+LxuOLxuCSpublZkUhkys9KWDt2wXI6QtYqPMVnXv3f/9GNw+3S8BTz6YfbtWDhQv3XM9s87Plf+w+Fbvtn8gO5vCGXN+TyZqZy5V3gQ0NDisVi2rp1qxYuXHjL+9FoVNFodOznRCIx5edlPJ4Fp42Z9DNtsl8jHVOU96jhId3oOKSh/456nk+PRCK3/TP5gVzekMsbcnmTb67KysoJX89rIU86nVYsFtNDDz2kNWvW5PNRY0zNCm/jl9161j8ql/l0AHBFzgVurVVbW5uqqqr0xBNPFCyQWd8oTfeiYlk4O34ShZ5PB4AgybnAu7u7dfToUf35z3/Wjh07tGPHDnV2duYdyJRVyDQ8JhWXTD2wuCR78XGqKY+bN73tPO1xPAD4KOc58I985CPav39mphzMhs2SNOGdI5KyZ97/unNkSvPne9txyON4APBRIFdiGmNkNm6RjT6VvXe795xC1iptjMyyuuy929O42GhqVsh+0D39/U4xnw4AQRPIAh9lSsvHFumEc7iKa9Y3yp4+Nr0LmbeZTweAoJnVj5Mt6Hw6AARMoM/AC6Fg8+kAEDCzv8AnmE9X+qYUmu9pPh0AgmbWF/io/5xPB4DZYFbPgQPAbEaBA4CjKHAAcBQFDgCOosABwFEUOAA4igIHAEdR4ADgKAocABwV6JWYNtmfXf5+oSf7ZcfGyNSsyC5/n+639gDALBXIArfWyh7YN+4BVKPfVG8/6JY9fXzsAVTG45cgA8BsEcwCP7BPtqNdSk3ybfLJvuz7kszGLXcwGQAER+DmwG2yX/bY4cnLe1RqSPbYEdmBK3cmGAAETPAKvH3/9L5BR8qeibfPzPdyAkDQBa/AL/R4G997boaSAECwBa7AdfOmt/Fpj+MBYJYIXoHPn+9tfMjjeACYJQJX4KZmhbfxy+pmKAkABFvwCnx9ozTdRTpl4ex4AJiDglfgZRUyDY9JxSVTDywuyS7m4QuJAcxRgVzIYzZslqRxKzHHKQuPrcQEgLkqmAVujMzGLbLRp7LPQuk9p5C1Shsjs6wu+ywUzrwBzHGBLPBRprRcZtNzkqRwJKJEIuFzIgAIjsDNgQMApocCBwBHGWut9TsEAMA7Z87Ad+3a5XeECZHLG3J5Qy5v5louZwocADAeBQ4Ajip6+eWXX/Y7xHTV1tb6HWFC5PKGXN6Qy5u5lIuLmADgKKZQAMBRFDgAOCrQS+klae/evers7FRpaalisZjfccYkEgm1trYqmUzKGKNoNKrHH3/c71hKpVL6/ve/r3Q6rUwmo4aGBjU2BuORuyMjI9q1a5cqKioCdbvX17/+dZWUlGjevHkqKipSc3Oz35EkSdevX1dbW5suXrwoY4y2bdume++919dMly5d0u7du8d+vnz5shobG7V+/XofU2W9+eab6ujokDFGS5cuVVNTk4qLi/2OpUOHDun3v/+9rLVat25dYf+ubMCdOXPG9vT02BdffNHvKOP09/fbnp4ea621N27csNu3b7cXL170OZW1IyMjdnBw0Fpr7c2bN+13vvMd293d7XOqrDfeeMPu2bPH/uQnP/E7yjhNTU12YGDA7xi3+NWvfmXj8bi1Nnssr1275nOi8TKZjP3qV79qL1++7HcU29fXZ5uamuzw8LC11tpYLGYPHz7sbyhrbW9vr33xxRft0NCQTafT9gc/+IH929/+VrDPD/wUysqVK3X33Xf7HeMW5eXlY1eVFyxYoKqqKvX39/ucKvskx5KS7LPUM5mMMpmMjDE+p5L6+vrU2dmpdevW+R3FCTdu3NC7776rtWvXSpJCoZAWLVrkc6rxurq69KEPfUj33HOP31EkZf+Fl0qllMlklEqlVF7u/xNL//rXv6qurk533XWXioqK9NGPflTHjx8v2OcHfgrFBZcvX9b58+dVVxeMr3cbGRnRzp079fe//12f//znVV9f73ckvf7663r66ac1ODjod5QJ/ehHP5Ikffazn1U0GvU5Tfa/qcWLF2vv3r3q7e1VbW2ttm7dOvbLOQj+8Ic/6DOf+YzfMSRJFRUVevLJJ7Vt2zYVFxdr9erVWr16td+xtHTpUv3mN7/R1atXVVxcrFOnTmnFCm9fGzmVwJ+BB93Q0JBisZi2bt2qhQsX+h1HkjRv3jz9/Oc/V1tbm3p6enThwgVf85w8eVKlpaWBvT/3lVde0U9/+lO99NJL+t3vfqezZ8/6HUmZTEbnz5/X5z73Of3sZz/TXXfdpYMHD/oda0w6ndbJkyfV0NDgdxRJ0rVr13TixAm1trbq1Vdf1dDQkI4ePep3LFVXV+sLX/iCfvjDH+rHP/6xli9frnnzCle7nIHnIZ1OKxaL6aGHHtKaNWv8jnOLRYsWadWqVTp9+rRqamp8y9Hd3a23335bp06dUiqV0uDgoFpaWrR9+3bfMv2niorsd7CWlpbqgQce0Llz57Ry5UpfM4XDYYXD4bF/PTU0NASqwE+dOqUPf/jDKisr8zuKpOx0zpIlS7R48WJJ0po1a/Tee+/p4Ycf9jmZtHbt2rGpsF//+tcKh8MF+2zOwHNkrVVbW5uqqqr0xBNP+B1nzD//+U9dv35dUvaOlHfeeUdVVVW+Ztq0aZPa2trU2tqqF154QR/72McCU95DQ0Nj0zpDQ0N65513fP1lN6qsrEzhcFiXLl2SlC2o6upqn1P9W5CmTyQpEono/fff1/DwsKy16urq8v2/+1EDAwOSsneu/elPf9KDDz5YsM8O/Bn4nj17dPbsWV29elXPP/+8Ghsbx36b+am7u1tHjx5VTU2NduzYIUn68pe/rE984hO+5rpy5YpaW1s1MjIia60+/elP65Of/KSvmYJsYGBAv/jFLyRlpy0efPBB3X///T6nynr22WfV0tKidDqtJUuWqKmpye9Ikv79i+5rX/ua31HG1NfXq6GhQTt37lRRUZGWL18eiGsZkhSLxXT16lWFQiF95StfKejFaJbSA4CjmEIBAEdR4ADgKAocABxFgQOAoyhwAHAUBQ4AjqLAAcBR/wdQcO91wW79AQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X7qVKJWM2YNc"
      },
      "source": [
        "class K_Means:\n",
        "    def __init__(self, k=2, tol=0.001, max_iter=300):\n",
        "        self.k = k\n",
        "        self.tol = tol\n",
        "        self.max_iter = max_iter\n",
        "\n",
        "    def fit(self,data):\n",
        "\n",
        "        self.centroids = {}\n",
        "\n",
        "        for i in range(self.k):\n",
        "            self.centroids[i] = data[i]\n",
        "\n",
        "        for i in range(self.max_iter):\n",
        "            self.classifications = {}\n",
        "# Assignment step\n",
        "            for i in range(self.k):\n",
        "                self.classifications[i] = []\n",
        "\n",
        "            for featureset in data:\n",
        "                distances = [np.linalg.norm(featureset - self.centroids[centroid]) for centroid in self.centroids]\n",
        "                classification = distances.index(min(distances))\n",
        "                self.classifications[classification].append(featureset)\n",
        "\n",
        "            prev_centroids = dict(self.centroids)\n",
        "\n",
        "# Update step\n",
        "            for classification in self.classifications:\n",
        "                self.centroids[classification] = np.average(self.classifications[classification], axis=0)\n",
        "\n",
        "# Evaluation\n",
        "            optimized = True\n",
        "            for c in self.centroids:\n",
        "                original_centroid = prev_centroids[c]\n",
        "                current_centroid = self.centroids[c]\n",
        "                if np.sum((current_centroid - original_centroid) / original_centroid * 100.0) > self.tol:\n",
        "                    print(np.sum((current_centroid - original_centroid) / original_centroid * 100.0))\n",
        "                    optimized = False\n",
        "\n",
        "            if optimized:\n",
        "                break\n",
        "\n",
        "    def predict(self, data):\n",
        "        distances = [np.linalg.norm(data - self.centroids[centroid]) for centroid in self.centroids]\n",
        "        classification = distances.index(min(distances))\n",
        "        return classification"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y8hQ5O8L2a_Z",
        "outputId": "da676b1f-cb86-4594-ffe1-d80dd59550a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "source": [
        "model = K_Means()\n",
        "model.fit(X)\n",
        "\n",
        "for centroid in model.centroids:\n",
        "    plt.scatter(model.centroids[centroid][0], model.centroids[centroid][1],\n",
        "                marker=\"o\", color=\"k\", s=150, linewidths=5)\n",
        "\n",
        "colors = 10*[\"g\",\"r\",\"c\",\"b\",\"k\"]\n",
        "\n",
        "for classification in model.classifications:\n",
        "    color = colors[classification]\n",
        "    for featureset in model.classifications[classification]:\n",
        "        plt.scatter(featureset[0], featureset[1], marker=\"x\", color=color, s=150, linewidths=5)\n",
        "        \n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "453.3333333333334\n",
            "102.72108843537411\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WwJMTnuJ2grq"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v6PhDx6B2BPk"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}